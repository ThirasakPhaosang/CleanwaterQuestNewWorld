*** Begin Patch
*** Update File: game.tsx
@@
             for (const f of foamRef.current) { ctx.globalAlpha = 0.6 * f.life; ctx.fillStyle = '#ffffff'; ctx.fillRect(f.x, f.y, 2, 1); }
             ctx.globalAlpha = 1;
             // Sun/Moon reflection path
             const reflectX = skyStateRef.current.sunVis>0.2 ? skyStateRef.current.sunX : (skyStateRef.current.moonVis>0.2 ? skyStateRef.current.moonX : -9999);
             if (reflectX > -1000) {
                 const strength = Math.max(skyStateRef.current.sunVis, skyStateRef.current.moonVis);
                 const grad = ctx.createLinearGradient(reflectX-60, waterLine, reflectX+60, waterLine);
                 grad.addColorStop(0, 'rgba(255,255,255,0)');
                 grad.addColorStop(0.5, gba(255,255,255,));
                 grad.addColorStop(1, 'rgba(255,255,255,0)');
                 ctx.fillStyle = grad;
                 for (let i=0;i<8;i++) { ctx.fillRect(reflectX-60, waterLine + i*3, 120, 2); }
             }
+            // Specular glints along crests (sparkles)
+            const sunInt = Math.max(0.1, skyStateRef.current.sunVis);
+            if (sunInt > 0.05) {
+                for (let x=0; x<=w; x+=12) {
+                    const p0 = getWaveHeightAndSlope(x-6 - worldScrollX, time);
+                    const p1 = getWaveHeightAndSlope(x - worldScrollX, time);
+                    const p2 = getWaveHeightAndSlope(x+6 - worldScrollX, time);
+                    const curvature = (p2.height - 2*p1.height + p0.height);
+                    if (Math.abs(p1.slope) < 0.02 && curvature < -0.6) { // near crest
+                        const s = 0.6 + 0.8*Math.random();
+                        ctx.globalAlpha = 0.15 + 0.35*sunInt;
+                        ctx.fillStyle = 'rgba(255,255,255,0.95)';
+                        ctx.beginPath(); ctx.arc(x, p1.height-2, 1.2*s, 0, Math.PI*2); ctx.fill();
+                    }
+                }
+                ctx.globalAlpha = 1;
+            }
*** End Patch
